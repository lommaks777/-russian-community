// –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å–∞
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { JSDOM } from 'jsdom';

const ROOT = process.cwd();
const OUT_SOURCES = path.join(ROOT, 'data', 'event_sources.txt');

const UA = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 events-bot/1.1';

// –ù–∞–¥–µ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å–µ
const RELIABLE_SOURCES = [
  // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞
  'https://www.buenosaires.gob.ar/agenda',
  'https://www.buenosaires.gob.ar/eventos',
  'https://www.buenosaires.gob.ar/calendario',
  'https://vivamoscultura.buenosaires.gob.ar/agenda',
  'https://vivamoscultura.buenosaires.gob.ar/eventos',
  
  // –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã
  'https://www.cck.gob.ar/agenda',
  'https://www.cck.gob.ar/eventos',
  'https://www.centroculturalrecoleta.org/agenda',
  'https://www.centroculturalrecoleta.org/eventos',
  'https://usinadelarte.org/agenda',
  'https://usinadelarte.org/eventos',
  
  // –¢–µ–∞—Ç—Ä—ã –∏ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã
  'https://www.teatrocolon.org.ar/agenda',
  'https://www.teatrocolon.org.ar/eventos',
  'https://complejoteatral.gob.ar/agenda',
  'https://complejoteatral.gob.ar/eventos',
  'https://www.konex.org/agenda',
  'https://www.konex.org/eventos',
  
  // –ú—É–∑–µ–∏ –∏ –≥–∞–ª–µ—Ä–µ–∏
  'https://www.malba.org.ar/agenda',
  'https://www.malba.org.ar/eventos',
  'https://www.bellasartes.gob.ar/agenda',
  'https://www.bellasartes.gob.ar/eventos',
  
  // RSS –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  'https://www.buenosaires.gob.ar/feed',
  'https://www.buenosaires.gob.ar/rss',
  'https://www.buenosaires.gob.ar/calendar.ics',
  'https://vivamoscultura.buenosaires.gob.ar/feed',
  'https://vivamoscultura.buenosaires.gob.ar/rss',
  'https://www.cck.gob.ar/feed',
  'https://www.cck.gob.ar/rss',
  'https://www.cck.gob.ar/calendar.ics',
  
  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏
  'https://www.lunapark.com.ar/agenda',
  'https://www.lunapark.com.ar/eventos',
  'https://www.planetario.gob.ar/agenda',
  'https://www.planetario.gob.ar/eventos',
  'https://www.ecoparque.gob.ar/agenda',
  'https://www.ecoparque.gob.ar/eventos',
  
  // –§–µ—Å—Ç–∏–≤–∞–ª–∏ –∏ —è—Ä–º–∞—Ä–∫–∏
  'https://www.buenosaires.gob.ar/feria-de-mataraderos',
  'https://www.buenosaires.gob.ar/feria-de-san-telmo',
  'https://www.buenosaires.gob.ar/feria-de-recoleta',
  
  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
  'https://www.ticketek.com.ar/eventos',
  'https://www.tuentrada.com/eventos',
  'https://www.passline.com/eventos',
  'https://www.allaccess.com.ar/agenda',
  'https://www.agendacultural.com.ar',
  'https://www.eventbrite.com.ar/d/argentina--buenos-aires/events/',
];

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
const COMMON_PATHS = [
  '/agenda', '/eventos', '/events', '/calendario', '/actividades', 
  '/cartelera', '/programacion', '/feed', '/rss', '/calendar.ics'
];

function isValidUrl(url) {
  try {
    const u = new URL(url);
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–∞–π—Ç—ã
    const bad = ['facebook.com', 'instagram.com', 'twitter.com', 'x.com', 
                't.me', 'wa.me', 'youtube.com', 'linkedin.com', 
                'tripadvisor', 'booking', 'google.com', 'maps.google.com'];
    
    if (bad.some(b => u.hostname.includes(b))) return false;
    
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Å–∞–π—Ç—ã
    const good = /\.ar$/.test(u.hostname) || 
                 /buenosaires|caba|gob\.ar|konex|malba|cck|recoleta|usinadelarte|colon|complejoteatral|teatro|museo|centro|cultural/i.test(u.hostname);
    
    return good;
  } catch {
    return false;
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fetch —Å —Ä–µ—Ç—Ä–∞—è–º–∏
async function fetchText(url, maxBytes = 500_000) {
  const tryOnce = async (u) => {
    try {
      const r = await fetch(u, { 
        headers: { 'User-Agent': UA },
        timeout: 10000 
      });
      const buf = await r.arrayBuffer();
      return Buffer.from(buf).slice(0, maxBytes).toString('utf8');
    } catch (e) {
      throw e;
    }
  };
  
  try {
    return await tryOnce(url);
  } catch (e1) {
    // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Ä–∏–¥–µ—Ä
    try {
      const proxied = `https://r.jina.ai/${url}`;
      return await tryOnce(proxied);
    } catch (e2) {
      console.warn(`Failed to fetch ${url}: ${e2.message}`);
      return '';
    }
  }
}

// –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async function findAdditionalSources(url) {
  const html = await fetchText(url, 100_000);
  if (!html) return [];
  
  const dom = new JSDOM(html);
  const doc = dom.window.document;
  const found = new Set();
  
  // –ü–æ–∏—Å–∫ RSS/Atom —Ñ–∏–¥–æ–≤
  doc.querySelectorAll('link[rel="alternate"]').forEach(link => {
    const type = (link.getAttribute('type') || '').toLowerCase();
    const href = link.getAttribute('href');
    if ((type.includes('rss') || type.includes('atom')) && href) {
      try {
        const fullUrl = new URL(href, url).toString();
        if (isValidUrl(fullUrl)) found.add(fullUrl);
      } catch {}
    }
  });
  
  // –ü–æ–∏—Å–∫ ICS –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
  doc.querySelectorAll('a[href*=".ics"]').forEach(link => {
    const href = link.getAttribute('href');
    if (href) {
      try {
        const fullUrl = new URL(href, url).toString();
        if (isValidUrl(fullUrl)) found.add(fullUrl);
      } catch {}
    }
  });
  
  // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  doc.querySelectorAll('a[href]').forEach(link => {
    const href = link.getAttribute('href');
    if (href && /agenda|events|eventos|calendar|calendario|actividades|programacion|cartelera/i.test(href)) {
      try {
        const fullUrl = new URL(href, url).toString();
        if (isValidUrl(fullUrl)) found.add(fullUrl);
      } catch {}
    }
  });
  
  return [...found];
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
async function checkSource(url) {
  try {
    const html = await fetchText(url, 10_000);
    return html.length > 0;
  } catch {
    return false;
  }
}

async function main() {
  console.log('üîç –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å–∞...');
  
  const allSources = new Set();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–µ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
  for (const source of RELIABLE_SOURCES) {
    allSources.add(source);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const validSources = [];
  for (const source of [...allSources]) {
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞: ${source}`);
    if (await checkSource(source)) {
      validSources.push(source);
      console.log(`‚úÖ ${source}`);
    } else {
      console.log(`‚ùå ${source}`);
    }
  }
  
  // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
  console.log('\nüîç –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
  for (const source of validSources.slice(0, 10)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
    try {
      const additional = await findAdditionalSources(source);
      additional.forEach(url => {
        if (isValidUrl(url)) allSources.add(url);
      });
    } catch (e) {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ ${source}: ${e.message}`);
    }
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  const finalSources = [...allSources].filter(isValidUrl).slice(0, 50);
  
  const dir = path.join(ROOT, 'data');
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
  
  fs.writeFileSync(OUT_SOURCES, finalSources.join('\n') + '\n');
  
  console.log(`\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${finalSources.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ ${OUT_SOURCES}`);
  console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:');
  finalSources.forEach((source, i) => {
    console.log(`${i + 1}. ${source}`);
  });
}

main().catch(e => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', e);
  process.exit(1);
});