// test/test_suite.js - –û—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
const { 
  withKeyForPlacesMedia, 
  emojiFor, 
  whenText, 
  upcomingOnly, 
  filtered, 
  clearForm, 
  buildJson, 
  tagify, 
  priceFrom, 
  firstSentences 
} = require('./test_utils');

const { mockPlaces, mockEvents, mockFormData } = require('./test_data');

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function assert(condition, message) {
  if (!condition) {
    throw new Error(`Assertion failed: ${message}`);
  }
}

function assertEquals(actual, expected, message) {
  if (actual !== expected) {
    throw new Error(`Assertion failed: ${message}. Expected: ${expected}, Actual: ${actual}`);
  }
}

function assertArrayLength(array, expectedLength, message) {
  if (array.length !== expectedLength) {
    throw new Error(`Assertion failed: ${message}. Expected length: ${expectedLength}, Actual: ${array.length}`);
  }
}

function assertTrue(condition, message) {
  if (!condition) {
    throw new Error(`Assertion failed: ${message}`);
  }
}

function assertFalse(condition, message) {
  if (condition) {
    throw new Error(`Assertion failed: ${message}`);
  }
}

// –¢–µ—Å—Ç—ã –¥–ª—è withKeyForPlacesMedia
function testWithKeyForPlacesMedia() {
  console.log('üß™ Testing withKeyForPlacesMedia...');
  
  // –¢–µ—Å—Ç —Å URL –±–µ–∑ –∫–ª—é—á–∞
  const urlWithoutKey = "https://places.googleapis.com/v1/places/ChIJTest/photos/ATKogpe/media?maxWidthPx=800";
  const result1 = withKeyForPlacesMedia(urlWithoutKey);
  assertTrue(result1.includes('key='), 'Should add key parameter to Places API URL');
  
  // –¢–µ—Å—Ç —Å URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∫–ª—é—á
  const urlWithKey = "https://places.googleapis.com/v1/places/ChIJTest/photos/ATKogpe/media?maxWidthPx=800&key=test";
  const result2 = withKeyForPlacesMedia(urlWithKey);
  assertEquals(result2, urlWithKey, 'Should not modify URL that already has key');
  
  // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º URL
  const result3 = withKeyForPlacesMedia("");
  assertEquals(result3, "", 'Should return empty string for empty URL');
  
  // –¢–µ—Å—Ç —Å –Ω–µ-Places API URL
  const nonPlacesUrl = "https://example.com/image.jpg";
  const result4 = withKeyForPlacesMedia(nonPlacesUrl);
  assertEquals(result4, nonPlacesUrl, 'Should return original URL for non-Places API URL');
  
  console.log('‚úÖ withKeyForPlacesMedia tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è emojiFor
function testEmojiFor() {
  console.log('üß™ Testing emojiFor...');
  
  // –¢–µ—Å—Ç —Å —Å–æ–±—ã—Ç–∏–µ–º —Å —Ç–µ–≥–∞–º–∏
  const eventWithTags = { tags: ['–º—É–∑—ã–∫–∞', '–∫–æ–Ω—Ü–µ—Ä—Ç'] };
  const result1 = emojiFor(eventWithTags);
  assertEquals(result1, 'üéµ', 'Should return music emoji for music tag');
  
  // –¢–µ—Å—Ç —Å —Å–æ–±—ã—Ç–∏–µ–º –±–µ–∑ —Ç–µ–≥–æ–≤
  const eventWithoutTags = { tags: [] };
  const result2 = emojiFor(eventWithoutTags);
  assertEquals(result2, 'üéüÔ∏è', 'Should return default ticket emoji for no tags');
  
  // –¢–µ—Å—Ç —Å —Å–æ–±—ã—Ç–∏–µ–º –±–µ–∑ –ø–æ–ª—è tags
  const eventNoTags = {};
  const result3 = emojiFor(eventNoTags);
  assertEquals(result3, 'üéüÔ∏è', 'Should return default ticket emoji for missing tags');
  
  console.log('‚úÖ emojiFor tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è whenText
function testWhenText() {
  console.log('üß™ Testing whenText...');
  
  const now = new Date();
  const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  const tomorrowEnd = new Date(tomorrow.getTime() + 3 * 60 * 60 * 1000);
  
  const event = {
    start: tomorrow.toISOString(),
    end: tomorrowEnd.toISOString()
  };
  
  const result = whenText(event);
  assertTrue(result.includes('2024') || result.includes('2025'), 'Should contain year');
  assertTrue(result.includes(':'), 'Should contain time');
  
  console.log('‚úÖ whenText tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è upcomingOnly
function testUpcomingOnly() {
  console.log('üß™ Testing upcomingOnly...');
  
  const result = upcomingOnly(mockEvents);
  assertArrayLength(result, 2, 'Should filter out past events');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–µ–¥—à–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–æ
  const pastEvent = result.find(e => e.id === 'event3');
  assertTrue(pastEvent === undefined, 'Should exclude past events');
  
  console.log('‚úÖ upcomingOnly tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è filtered
function testFiltered() {
  console.log('üß™ Testing filtered...');
  
  // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥—É
  const musicEvents = filtered(mockEvents, '–º—É–∑—ã–∫–∞', '', '');
  assertArrayLength(musicEvents, 1, 'Should filter by tag');
  assertEquals(musicEvents[0].id, 'event1', 'Should return correct event for music tag');
  
  // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ
  const freeEvents = filtered(mockEvents, '', 'free', '');
  assertArrayLength(freeEvents, 1, 'Should filter by free price');
  assertEquals(freeEvents[0].id, 'event2', 'Should return correct free event');
  
  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
  const searchResults = filtered(mockEvents, '', '', '—è—Ä–º–∞—Ä–∫–∞');
  assertArrayLength(searchResults, 1, 'Should filter by search query');
  assertEquals(searchResults[0].id, 'event2', 'Should return correct event for search');
  
  console.log('‚úÖ filtered tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è clearForm
function testClearForm() {
  console.log('üß™ Testing clearForm...');
  
  const fields = ['name', 'category', 'lat', 'lng', 'rus', 'query'];
  const result = clearForm(fields, true, true);
  
  assertEquals(result.rus, 3, 'Should set russian_score to 3');
  assertTrue(result.name === '', 'Should clear name field');
  assertTrue(result.lat === '', 'Should clear lat field');
  
  console.log('‚úÖ clearForm tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è buildJson
function testBuildJson() {
  console.log('üß™ Testing buildJson...');
  
  const result = buildJson(mockFormData);
  
  assertEquals(result.name, 'Test Place', 'Should set correct name');
  assertEquals(result.category, '–ö–æ—Ñ–µ', 'Should set correct category');
  assertEquals(result.lat, -34.6037, 'Should set correct latitude');
  assertEquals(result.lng, -58.3816, 'Should set correct longitude');
  assertEquals(result.russian_score, 3, 'Should set correct russian score');
  assertTrue(typeof result.id === 'number', 'Should generate numeric ID');
  
  console.log('‚úÖ buildJson tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è tagify
function testTagify() {
  console.log('üß™ Testing tagify...');
  
  const text1 = 'Concert de m√∫sica rusa en Buenos Aires';
  const result1 = tagify(text1);
  assertTrue(result1.includes('–º—É–∑—ã–∫–∞'), 'Should detect music tag');
  assertTrue(result1.includes('–∫–æ–Ω—Ü–µ—Ä—Ç'), 'Should detect concert tag');
  assertTrue(result1.includes('—Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–µ'), 'Should detect Russian tag');
  
  const text2 = 'Free kids party with live music';
  const result2 = tagify(text2);
  assertTrue(result2.includes('–±–µ—Å–ø–ª–∞—Ç–Ω–æ'), 'Should detect free tag');
  assertTrue(result2.includes('–¥–µ—Ç—è–º'), 'Should detect kids tag');
  assertTrue(result2.includes('–º—É–∑—ã–∫–∞'), 'Should detect music tag');
  
  const text3 = 'Regular text without special keywords';
  const result3 = tagify(text3);
  assertArrayLength(result3, 0, 'Should return empty array for text without keywords');
  
  console.log('‚úÖ tagify tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è priceFrom
function testPriceFrom() {
  console.log('üß™ Testing priceFrom...');
  
  // –¢–µ—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  const freeText = 'Evento gratuito para toda la familia';
  const result1 = priceFrom(freeText);
  assertTrue(result1.is_free, 'Should detect free event');
  assertEquals(result1.text, '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ', 'Should set correct free text');
  
  // –¢–µ—Å—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  const paidText = 'Entrada: ARS 5000 por persona';
  const result2 = priceFrom(paidText);
  assertFalse(result2.is_free, 'Should detect paid event');
  assertTrue(result2.text.includes('ARS'), 'Should extract price information');
  
  // –¢–µ—Å—Ç –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ
  const noPriceText = 'Evento sin informaci√≥n de precio';
  const result3 = priceFrom(noPriceText);
  assertFalse(result3.is_free, 'Should default to paid event');
  assertEquals(result3.text, '', 'Should return empty text for no price info');
  
  console.log('‚úÖ priceFrom tests passed');
}

// –¢–µ—Å—Ç—ã –¥–ª—è firstSentences
function testFirstSentences() {
  console.log('üß™ Testing firstSentences...');
  
  const longText = '–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ –≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ —Ç—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ò –µ—â–µ –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...';
  const result1 = firstSentences(longText);
  assertTrue(result1.includes('–ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'), 'Should include first sentence');
  assertTrue(result1.includes('–≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'), 'Should include second sentence');
  assertTrue(result1.length <= 220, 'Should respect maxChars limit');
  
  const shortText = '–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.';
  const result2 = firstSentences(shortText);
  assertEquals(result2, shortText, 'Should return short text unchanged');
  
  const emptyText = '';
  const result3 = firstSentences(emptyText);
  assertEquals(result3, '', 'Should return empty string for empty input');
  
  console.log('‚úÖ firstSentences tests passed');
}

// –¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
function testDataStructure() {
  console.log('üß™ Testing data structure...');
  
  // –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Å—Ç–∞
  const place = mockPlaces[0];
  assertTrue(typeof place.id === 'number', 'Place should have numeric ID');
  assertTrue(typeof place.name === 'string', 'Place should have name');
  assertTrue(typeof place.lat === 'number', 'Place should have latitude');
  assertTrue(typeof place.lng === 'number', 'Place should have longitude');
  assertTrue(typeof place.category === 'string', 'Place should have category');
  
  // –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–±—ã—Ç–∏—è
  const event = mockEvents[0];
  assertTrue(typeof event.id === 'string', 'Event should have string ID');
  assertTrue(typeof event.title === 'string', 'Event should have title');
  assertTrue(typeof event.start === 'string', 'Event should have start time');
  assertTrue(Array.isArray(event.tags), 'Event should have tags array');
  assertTrue(typeof event.price === 'object', 'Event should have price object');
  
  console.log('‚úÖ data structure tests passed');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runAllTests() {
  console.log('üöÄ Starting test suite for Russian Community Map...\n');
  
  try {
    testWithKeyForPlacesMedia();
    testEmojiFor();
    testWhenText();
    testUpcomingOnly();
    testFiltered();
    testClearForm();
    testBuildJson();
    testTagify();
    testPriceFrom();
    testFirstSentences();
    testDataStructure();
    
    console.log('\nüéâ All tests passed successfully!');
    console.log('üìä Test Summary:');
    console.log('   ‚úÖ withKeyForPlacesMedia: Working correctly');
    console.log('   ‚úÖ emojiFor: Working correctly');
    console.log('   ‚úÖ whenText: Working correctly');
    console.log('   ‚úÖ upcomingOnly: Working correctly');
    console.log('   ‚úÖ filtered: Working correctly');
    console.log('   ‚úÖ clearForm: Working correctly');
    console.log('   ‚úÖ buildJson: Working correctly');
    console.log('   ‚úÖ tagify: Working correctly');
    console.log('   ‚úÖ priceFrom: Working correctly');
    console.log('   ‚úÖ firstSentences: Working correctly');
    console.log('   ‚úÖ dataStructure: Working correctly');
    
  } catch (error) {
    console.error('\n‚ùå Test failed:', error.message);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    runAllTests,
    testWithKeyForPlacesMedia,
    testEmojiFor,
    testWhenText,
    testUpcomingOnly,
    testFiltered,
    testClearForm,
    testBuildJson,
    testTagify,
    testPriceFrom,
    testFirstSentences,
    testDataStructure
  };
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllTests();
}

